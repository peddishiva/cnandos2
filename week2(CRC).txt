#include <stdio.h>
#include <string.h>

int main() {
    int i, j, keylen, msglen;
    char input[100], key[30], temp[30], quot[100], rem[30], key1[30];

    printf("Enter data: ");
    fgets(input, sizeof(input), stdin);
    input[strcspn(input, "\n")] = '\0'; // Remove newline

    printf("Enter key: ");
    fgets(key, sizeof(key), stdin);
    key[strcspn(key, "\n")] = '\0'; // Remove newline

    keylen = strlen(key);
    msglen = strlen(input);

    strcpy(key1, key);  // Backup key
    // Append zeros to the input
    for (i = 0; i < keylen - 1; i++) {
        input[msglen + i] = '0';
    }
    input[msglen + keylen - 1] = '\0'; // Null terminate

    // Copy initial bits for division
    for (i = 0; i < keylen; i++) {
        temp[i] = input[i];
    }

    for (i = 0; i < msglen; i++) {
        quot[i] = temp[0];

        if (quot[i] == '0') {
            for (j = 0; j < keylen; j++) {
                key[j] = '0';
            }
        } else {
            strcpy(key, key1);
        }

        // XOR operation
        for (j = 1; j < keylen; j++) {
            rem[j - 1] = (temp[j] == key[j]) ? '0' : '1';
        }
        rem[keylen - 1] = input[i + keylen];

        // Update temp
        for (j = 0; j < keylen; j++) {
            temp[j] = rem[j];
        }
    }

    quot[msglen] = '\0';
    rem[keylen - 1] = '\0';

    printf("Quotient is %s\n", quot);
    printf("Remainder is: %s\n", rem);
    printf("Final data is: ");
    printf("%.*s%s\n", msglen, input, rem); // input has extra zeroes, so limit to msglen

    return 0;
}
